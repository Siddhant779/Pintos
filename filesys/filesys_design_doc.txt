                      +-------------------------+
                      |         EE 461S         |
                      | PROJECT 4: FILE SYSTEMS |
                      |      DESIGN DOCUMENT    |
                      +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Siyuan (Tim) Chen timchenut567@utexas.edu
Saumya Jain saumyajain@utexas.edu
David Li davidli216@utexas.edu
Siddhant Pandit panditsiddhant.sp@utexas.edu

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

                     INDEXED AND EXTENSIBLE FILES
                     ============================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> A2: What is the maximum size of a file supported by your inode
>> structure?  Show your work.

---- RATIONALE ----

>> A6: Is your inode structure a multilevel index?  If so, why did you
>> choose this particular combination of direct, indirect, and doubly
>> indirect blocks?  If not, why did you choose an alternative inode
>> structure, and what advantages and disadvantages does your
>> structure have, compared to a multilevel index?

                            SUBDIRECTORIES
                            ==============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Added 
    bool          is_directory;
    block_sector_t  *parent;  /* Pointer to directory that contains the file */
to struct file:
    -isdirectory differentiates directories from files for file processing purposes.
    -parent points to the block sector of whatever directory holds the file, for use in finding files.

Added
    block_sector_t curr_dir
to struct thread:
    -curr_dir represents the block sector of the thread's current working directory and can be used to open 
     the current working directory.

Removed struct dir and changed all directories to be of type struct file to make syscalls with directories easier
to implement.



---- ALGORITHMS ----

>> B2: Describe your code for traversing a user-specified path.  How
>> do traversals of absolute and relative paths differ?

Traversals of absolute path will start from the root directory and traverse from there while traversals from a relative path 
will first get the inode of thread's path and traverse from there.

First, we check relative/absolute by what the char input starts as. If the path starts with '/', we remove this first character
from the path and set the current directory to the root directory. We can then continue to parse the path normally. To parse 
through the directory after, we used strtok_r to parse every level of the directory, closing the current directory and opening 
the next directory if lookup is able to find it.For every level of directory, the thread's current directory is set to the newly 
opened directory. Finally, when the last file in the path is reached, the name of that file is returned.

---- RATIONALE ----

>> B6: Explain why you chose to represent the current directory of a
>> process the way you did.
We added a block_sector_t variable called "curr_dir" to the thread struct, which corresponds to the block block_sector
of the current working directory. The block_sector_t can be used to open an inode which can in turn be used to open the
directory. We chose to represent curr_dir as a block_sector_t because block sectors are permanent and are always associated
with the directory.  This way, the current directory can be opened and closed anytime it is needed while still being able to be
accessed unconditionally. We also considered using struct inode or struct file to represent the current directory, however these 
data structures can be opened or closed at any time and are temporary, making it difficult to consistently access them.

                           SURVEY QUESTIONS
                           ================

Answering these questions is optional, but it will help us improve the
course in future semesters.  Feel free to tell us anything you
want -- these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the semester.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future semesters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students in future semesters?

>> Any other comments?

                     +--------------------------+
                     |         EE 461S          |
                     | PROJECT 2: USER PROGRAMS |
                     |      DESIGN DOCUMENT     |
                     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Siyuan (Tim) Chen timchenut567@utexas.edu
Saumya Jain saumyajain@utexas.edu
David Li davidli216@utexas.edu
Siddhant Pandit panditsiddhant.sp@utexas.edu

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.
>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

                           ARGUMENT PASSING
                           ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Nothing new or changed was made in terms of struct, struct member, or varaibles. 
The only thing that was changed was the function headers including 

`bool load()` and `bool setup_stack` including a new vairiable called `char **token_ptr`.
In start_process function we seperate the file name and arguments; in this case token_ptr
is a pointer to the start of the arguments which is passed from load to setup_stack.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

The setup_stack function will first create and add to an array of char 
strings (char** listOfArgs). For every part of the setup_stack process 
(argv[], word align, argc, and return), the algorithm will add the 
element to memory using writeToStack(). This contains the loop to first 
write every string to stack before using another loop to add word 
aligns. The algorithm then adds the last argv (which is zero) before 
another loop adds each argv address. Finally, the function adds the argc 
and return address. 
We were able to get argv[] in the right order by
starting at the end of our array `listOfArgs` and pushing each element 
into the stack starting at the end. Thus the last element of argv will
be at the highest address. 
Moreover, We avoid overflowing the stack page by making sure 
palloc_get_page() returns a free page where we can write the stack 
values to.


---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

We use strtok_r() since it is thread safe. Multiple threads can call
on it without having issues pop up. This is because strok_r is the
reentrant. For instance the last argument is the save_ptr which holds
the current parsing position within the string. Because of this you
can parse strings concurrently without it causing problems. strtok on
the other hand doesn't save the parsing state in a pointer thus not
making it thread safe.

                             SYSTEM CALLS
                             ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

typedef int pid_t - this is for storing the value of parenttid inside 
the struct thread

added `
struct file_sys {
    struct list_elem elem; // so i can go through the files for file_sys 
    struct file *file; //pointing to the actual file 
    int fd; // for file descriptor

};
`
this struct was used in functions such as close_file and open_file where 
fd was the input to the function. It linked the file pointer to a specific
fd which was important to functions such as those

struct lock sys_lock - used as a lock for when a file was being accessed,
modified, closed, etc. Used in both syscall.c and process.c. Only supports
one process modifying a file

#define STD_INPUT 0
#define STD_OUTPUT 1
- was used to describe the fd that was responsible for std input and std 
output

pid_t parent_tid - storing the parent pid into the the process

struct list file_list - storing a list of file_sys struct - there is a different
list for each process

int fd - used as a counter for the next available file descriptor value; started at
2 since stdin and stdout were at 0 and 1 respectfully.

struct semaphore thread_dying - part of the two - way handshake between the parent
and child process. Parent does a sema_down in process_wait to wait for the child 
process to die in process_exit where there is a sema_up

struct semaphore thread_dead -  part of the two - way handshake between the parent
and child process. Child does a sema_down in process_exit to wait for the parent to
reeap the child process in process_wait where there is a sema_up

struct semaphore thread_false_start - used for another race condition where
process_execute is blocked until it knows that the ELF bin has been succesfully 
uploaded. Makes sure that the thread starts before it actually executes - sema down in 
process_execute and sema up in start_process

int exit_status - used as a way to let process_wait know what the exit status is for a 
process

bool waiting - used as a way for to let the kernel know that the process is already waiting
so that the process doesn't have to wait again.

struct file *file - used for storing the executable file for the process. it is closed
when the process is about to exit.

`
    pid_t parent_tid; //need to store the parent pid
    struct list file_list;
    int fd; // each process has its own memory - own file descriptor then 
    struct semaphore thread_dying;
    struct semaphore thread_dead;

    struct semaphore thread_false_start;
    
    int exit_status;

    bool waiting;

    struct file *file;
`

are all things that have been added to the struct thread 




>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

File descriptors are indexes to a table of file of pointers. Processes have 
separate memory addresses (unless you specifically tell them to share).
Therefore, each process would likely have unique file descriptors for the 
files.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

syscall_read() first checks if the read size is greater than zero and if the fd is STD_INPUT, which indicates that the code should read from console. 
If those arent true, the code will then get the lock for file access (lock_acquire(&sys_lock);). The code then tries to find the file from the file pointer
via get_file_pointer(fd). If that fails, this returns -1 and releases the lock. If it works, it obtains the size via file_read(file_pointer, buffer, size),
and releases the lock before returning the size.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

Granularity: If an address of a page is valid, all of the addresses are valid. Pages are aligned (Page number starts at 12th bit and offset is within the 12 bits. 
Add page starts will be at multiple of 4k bits, last 12 bits zero). Pagedir will return the start of a page. 

In order to find an available page that can be mapped, the code will need to look through the address space until it finds a page that has not yet be mapped. 
The last number of times this can happen is 1 (map page first try). The most number of times is the the number of pages that can be stored total (as this code 
searches through every page).

For system calls that only copy a small amount of data (2 bytes). This means that you likely don't have to allocate a new page to store this information. 
This could likely reduce the number of page searches needed to find a page to store this information (might not need to assign a new page). However, this will require 
looking within pages

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

The wait signal calls process_wait(tid_t child_tid) in process.c, which establishes a two way handshake with process_exit(). This function checks the status of the
child first. If child is null, it returns -1, if child is already waiting, it also returns -1. If those previous conditions aren't true, it will call sema down
on the child's thread_dying semaphore, which waits for child to call sema up on the semaphore in it's process_exit(). In the child's process_exit() function, the child will 
call sema up on its dying semaphore, which notifies the parent and also calls sema down on the thread_dead semaphore which notifies the child that it has been reaped.
When process_wait is notified on the thread_dying semaphore, it will reap the child's status before calling sema up on the child's thread_dead semaphore. This will then notify
the child so that it may continue its process_exit() and get deallocated.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

At the beginning of our syscall_handler, we first make a pagedir_get_page() call that returns the kernel virtual address. If that value that is returned is null
then that means that UADDR is unmapped - we call a sys_exit(-1) in this case. Along with this the pagedir_get_page() makes sure that the address is also a user
address. Along with this at the begining of each syscall at the top of the handler we call two functions get_user() as well as put_user() which dereferences the
pointer by reading and writing to the value - if its not able to pass any of these two functions then a page_fault() is called with the handler. Lastly we make
sure that the pointer is above PHYS_BASE. 
Moreover whenever we are popping out values from the stack for system calls such as the write system call we have a function called get_args_stack which is called
to get the values. Within that function, we call valid_ptr() which makes sure that the address is valid before getting the value by calling syscall_exit(-1) if
pointer is less than USER_VADDR_BOTTOM and if the address is not in user virtual address >= PHYS_BASE. By having one function called valid_ptr() that checks to
make sure that the address is valid we are able to avoid obscuring the primary function of the code and instead just have one line that checks whether the address 
is right. We use valid_ptr to not only check whether the the values from the stack were right but also if the individual pointers within the array were right. For
instance in SYS_READ the second argument is a char* pointer to a buffer. Within the else if statement we go through the buffer and call valid_ptr to make sure that
the pointer doesn't have a bad value. 
By calling syscall_exit(-1) for bad pointer values we are calling thread_exit() which is responsible for descheduling the thread and destroying it. This also means
calling the process_exit() function which is responsible for destorying the current process's page directory, closing the executable file, freeing up allocated
resources, etc. 
An example of this is if the user passes a pointer that is null or a pointer to the kernel virtual address space then syscall_exit(-1) is called which will follow
a pattern that we discussed above. On the other hand if its a pointer to an unmapped part of virtual memory then a page fault is called where syscall_exit(-1) is
eventually called after setting eax to 0xffffffff and copies its former value into eip. If the call is able to pass all these tests and for instance if the signal
is SYS_READ and the buffer that is passed in is not a valid pointer checked by valid_ptr() function then syscall_exit(-1) is called.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

We implemented access to user memory by only checking that the user pointer pointed below PHYS_BASE and then dereferencing it - this was listed as the second method
in the Pintos Documentation. This uses the functions get_user() and put_user() which basically checks if we can read and write to the user address that was provided.
We decided to go with this implementation becuase it is normally faster becuase it takes advantage of the processer's MMU. In the case that a page fault occurs, this
approach will be a little slower since the page fault interrupt will slow down the computer but overall this is generally faster as it doesn't have to be performed
all the time. 

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

For our file descriptors, we had a variable in each process that incremented a file_desrciptor value that would determine the value of the next file descriptor used in 
the process using a filesys struct. The advantage of this design is its ease of use as there is no need to add an additional function for getting a new file descriptor,
which requires resources like locks and can lead to race conditions when getting file descriptors in multiple processes. Furthermore the usage of a struct allows for 
easier implementation for file descriptors as it provide an easy to use list of all files associated to a process. The disadvantage of this design is that it takes up 
more memory resources as there are extra variables for each active process.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

We did not change the tid to pid mapping implementation and used identity mapping.

                           SURVEY QUESTIONS
                           ================

Answering these questions is optional, but it will help us improve the
course in future semesters.  Feel free to tell us anything you
want -- these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the semester.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future semesters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future semesters or the remaining projects?

>> Any other comments?

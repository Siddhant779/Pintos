                     +---------------------------+
                     |         EE 461S           |
                     | PROJECT 3: VIRTUAL MEMORY |
                     |      DESIGN DOCUMENT      |
                     +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Siyuan (Tim) Chen timchenut567@utexas.edu
Saumya Jain saumyajain@utexas.edu
David Li davidli216@utexas.edu
Siddhant Pandit panditsiddhant.sp@utexas.edu

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

                   SUPPLEMENTAL PAGE TABLE MANAGEMENT
                   ==================================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

For our SPT we added lock, enum for the status of the page, struct for SPT, and
struct for SPTE. All of these declarations are within our page.c and page.h which
also include functions regarding loading pages and changing SPTE values.
Most of lazy loading is implemented in these files. 


struct lock spte_lock - uesd as lock for when a spte was being modified or accessed.
each thread/SPT in this case has its own lock - this allows for faster runtime.

-this is was the enum that was utilized to see where the spte exists- Frame means its in
the frame table, swap means its in swap space, in file means its on disk and needs to be
lazy loaded in, and all zero means its a page with memset of zero

enum page_status {
    FRAME, // in the memory 
    SWAP, // on the swap table  
    IN_FILE, //page is in the file needs to be brought in - on disk
    ALL_ZERO // means its all zero 
};

-this was the Struct SPT that holds the hash of spte - each thread has its own spt which stores
the spte data structures

struct SPT {
    struct hash page_entries;
};

-this is the struct SPTE that has information about the page 

struct SPTE {
    struct hash_elem SPTE_hash_elem; // Hash value for each page, lets it be part of the hash table
    
    //the key for the hash is the upage
    struct file *file; - needed for lazy loading - file read 
    off_t file_off; - needed for lazy loading - file offset within the file
    uint32_t page_read_bytes; - read page_read_bytes from the file 
    uint32_t page_zero_bytes; - and zero the final page_zero_bytes 

    void *kpage; - frame associated with this page  - could be null if there is no frame 
    void *upage; - for hte virutal address of hte page this exists as the key 

    bool writeable; - if the page is writeable or not - lazy loading 

    enum page_status page_stat; - has the status of the page as discussed above

    int swap_idx; - swap index if the page exists in the swap- our code knows where to get the frame from within our swap 

    bool pinned; - if the page is pinned you cnat remove it - needed for the eviction algorithm 

    uint32_t *pagedir; - has the page directory specific to that page 
    
    struct thread *curr; - has the thread for that specific page

    int index_frame; - has the index where the page exists within the frame table 
    // we need something for the swap here 
};


---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for accessing the data
>> stored in the SPT about a given page.

To access the data stored in the SPT about a given page, the code typically 
involves performing a hash table lookup based on the virtual address of the page. 
This lookup yields a pointer to the corresponding SPT entry. Once the entry is obtained, 
the code can access various fields in the entry to gather information about the page. 
For example, the code might check if the page is currently in memory or swapped out, 
and if it is on disk, the code would also contain information about the location of 
the page.
Specifically in our code: 
   Initialization:
   The `SPT_init` function initializes a new SPT. It allocates memory for the SPT structure, 
   initializes a lock for synchronization, and initializes a hash table (`page_entries`) to 
   store page entries. Each entry in this hash table corresponds to a virtual page in the 
   process's address space.

   Hash Functions: 
   - `SPT_hash_func`: This function computes a hash value for a given page entry based on its 
      virtual address (`upage`). It is used as the hash function when inserting and searching for 
      elements in the hash table.
   - `SPT_less_func`: This function defines the order of elements in the hash table. It compares 
      two page entries based on their virtual addresses.
   
   Lookup Functions:
   The `lookup_page` function takes a virtual address (`upage`) as input and searches the SPT for the 
   corresponding page entry. It computes the hash value for the given virtual address and uses `hash_find` 
   to find the corresponding element in the `page_entries` hash table. If the element is found, it returns
   a pointer to the corresponding `struct SPTE` (Supplemental Page Table Entry) containing information about 
   the page.

   Page Installation: 
   The `SPTE_install_file` function is responsible for creating and populating a new page entry in the SPT.
   It takes parameters such as the file pointer (`file`), file offset (`ofs`), virtual address (`upage`), 
   read and zero bytes, write permission (`writable`), page directory pointer (`pagedir`), and the current 
   thread (`t`). It allocates memory for a new `struct SPTE`, populates its fields with the provided 
   information, and inserts it into the SPT using `hash_insert`. If the insertion is successful 
   (for example, the page entry does not already exist in the SPT), the function returns `true`; otherwise, 
   it returns `false`.

   The `SPTE_install_file` function initializes a new page entry for a specific virtual page and associates 
   it with a file. The file pointer, with the file offset, allows the operating system to know which part of 
   the file corresponds to the given page. When this page needs to be loaded into memory, the file data can be 
   read from the specified offset. 

   Later whenever a page is accessed, the page faults and it goes through our load_page function where all the
   components of the SPTE are used. Within load_page, each page has a different function based on the status of
   the page. For instance for a swap status - the page is brought in from the swap table and for in file status
   the page is brought in from the disk by lazy loading. 

   There are also functions within frame.c which handle changing the statuses of certain sptes during the eviction
   algorithm. The eviction algorithm is able to accesses elements within the page becuase the FTE has a pointer to 
   that specific spte.  

---- SYNCHRONIZATION ----

>> A3: When two user processes both need a new frame at the same time,
>> how are races avoided?

The frame table is protected by a lock so that only one process can access and modify it at a time. In particular,
the get_frame() method first locks the frame lock so that there are no outside changes made to the frame table. Thus,
in such a scenario, whichever process first acquires the lock will first get a frame from the frame table and then
will surrender the lock to the other process which can then get another frame. This way, both processes do not try to
get the same frame from the frame table and a race condition is avoided.

---- RATIONALE ----

>> A4: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

We chose to implement our own structs for the supplemental page table entries (SPTE) and frame table entries (FTE) 
because we wanted more control over what information was stored for virtual-to-physical memory mappings. The SPTE 
keeps track of a virtual page address (upage) as well as the physical memory frame that it is mapped to (kpage).
The FTE keeps track of the SPTE that is currently mapped to it which in turns allows access to the upage and kpage.
The supplemental page table itself is a hashtable that uses the virtual page address (upage) as a key that maps to
a SPTE through a hash function. We chose to use a hash table as it allows easy and quick access of individual
SPTEs from just the upage itself, which is very convenient whenever processing virtual memory and loading pages.
For the frames, we used both a bitmap and also an array. First is a bitmap of length 367 (one for each frame) 
that is either a '0' if the frame is unused, or a '1' if the frame is occupied. The bitmap allows us to easily 
find an open frame to map a page to, which is used in our get_frames function. We also sed a basic array of FTEs 
for the frame table itself. We chose to use an array because arrays are easy to traverse, which is useful during 
the eviction process and also because array indexing matches that of bitmap indexing, which makes arrays easy to 
use alongside bitmaps.

                        PAGING TO AND FROM DISK
                        =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

For our paging to and from disk we added a struct FTE, a bitmap, and an array of 
Frame tables that holds 367 FTE - all of this exists withing frame.c and frame.h  

#define FRAME_NUM 367 - holds the number of frames that can exist in the frame table 

- struct that describes the frame table entries that exist in the frame table array
struct FTE {
    uint32_t index; - holds the index of its spot within the frame table 
    struct SPTE *page_entry; - pointer to page table entry (SPTE) associated to the frame
    struct thread *thr; - pointer to the thread that the frame exists in - used in pagedir and palloc functions.
    bool pinned; - this is something we need for the eviction alogorithm - if a pin is framed that means we shouldn't evict it 
};

struct bitmap *frame_map; - data structure that lets us know which entries within the frame table are free 

struct FTE *frame_table; - pointer to array that holds the FTEs that exist - size is 367

int evict_start; - points to the index of the last evicted frame + 1, or 0 by default - needed for the clock eviction algorithm


---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

The algorithm will first try to allocate to an empty space in physical 
memory. When physical memory is full, evict_frame will be called. 
This will go through physical memory until it finds a frame that has not been accessed. 
Then it will choose the frame index and call swap on that frame. To do so, swap frame is called, 
which evicts the frame from physical memory to swap area so the new frame can be put in. However,
if the frame is not dirty, then it will simply be overwritten.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

In our swap process, when we put a frame into the swap area, we update the frame's 
information in SPTE including where in the swap area the frame is stored, setting
the frame's status to swapped, setting kpage to null, and setting pinned to false. 
We also make the page as absent from directory and frees the page.

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

In order to decide whether a page fault for an invalid virtual address should cause the stack to be extended into that page
that faulted we had two conditions that needed to be met. The first condition was related to seeing if the fault address was 
above our esp since we can extend the page above the stack. If that condition wasn't met then the fault address would have to
either be 4 or 32 bytes below the esp due to the PUSH/ PUSHA instructions. If any of the conditions within the first condition
are true then that means that the virtual address is on the stack frame. 
The second condition is related to the fault address being less than PHYS_BASE or the fault address being greater than PHYS_BASE
minus the max stack size.
If both of these conditions are true then the stack is extented into the page that faulted 
Another heuristic within our stack growth implementation is we saved the user program's esp into TCB during syscall handler so that
if the page fault was from a syscall it would use the correct esp.

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

Our VM synchronization design incorporates locks at various layers to make sure our data structures 
are safe and prevent deadlock scenarios.
- At the frame table layer, a single lock is used, carefully avoiding circular dependencies by ensuring
that the only lock acquired while it is held is the supplemental page table entry lock for the specific 
entry of concern. This sequential acquisition reduces the risk of deadlock.
- The swap table bitmap, tracking used and free bits, operates in a lock-free manner to eliminate the 
possibility of circular dependencies and deadlock.
- Each process maintains a lock for its hash table of supplemental page table entries, used during 
lookups and modifications. To prevent potential deadlock, we ensure that the supplemental page table 
entry lock is acquired before releasing the hash table lock during a lookup, removing any code 
that might create a cycle.
- Global file system lock usage in file system operations is encapsulated within dedicated functions, 
preventing concurrent holding of different locks by multiple processes and avoiding potential deadlock 
scenarios.
The specific conditions for deadlock are mutual excluision, no preemption, hold and wait, and circular wait. 
We addressed ways to prevent each of these by guarding using locks, disabling preemption to prevent the interruption 
of a threat holding a lock and ensuring that the thread completes its critical section before other threads can execute,
releasing any locks a thread has before attempting to acquire new ones, and establishing a clear order for acquiring locks. 


>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

There is a lock on the SPTE, which needs to be acquired in order to access a prtciular page or evict it. 
While evicting, we get the lock that is on the SPTE corresponding to whichever page is being evicted. Then the 
page is cleared and process Q tries to access the evicted page but it is unsuccessful and triggers a page fault. 
We prevent Q from accessing or modifying the page during eviction because Q looks up the SPTE but it will be unable to 
acquire the lock. This avoids race conditions when P evicts the frame and Q faulting back in. 


>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

To ensure a second process cannot interfere, we implemented pinning. If a process loads a frame, it is pinned
and these pinned frames cannot be a part of the clock algorithm that is implemented. This means that those frames
cannot be assigned to another process like Q in this situation until they are unpinned which will happen after 
the loading in P is complete. In order to do this we have two functions within syscall.c that first loookup the page
based on the upage and set the specific spte that is returned by the upage to either true or false depending on if
its pinning or unpinning hte frame.

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

During the eviction process, non-dirty pages will be simply booted from memory to make space. Whenever something tries to access a paged out
page, the system will simply page fault and then lazy load the missing page back into physical memory. However, this can be an issue during some 
system calls such as the read and write syscalls as they involve buffers that should be preserved and not evicted for the duration of the syscall.
We therefore have a system of page pinning wherein the pages corresponding to the buffers used in these syscalls are marked as "pinned" when
the syscall begins and then unmarked when the syscall ends. During the eviction process, frames with pages marked as "pinned" will not be
evicted, ensuring that the pages are maintained during the syscall and cannot be paged out or evicted from physical memory. If an invalid virtual 
address is accessed, the program will page fault and depending on circumstances can grow the stack, lazy load into memory, or exit the process.

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

Our implementation is somewhere in the middle of the two extremes listed above, closer to the single lock side.
We mostly user three types of locks for synchronization, SPT locks, a single frame lock, and a swap lock.
The frame and swap locks are shared by all threads in the system and only one thread can hold it at once, limiting
the parallelism. However, the SPT locks are implemented on a per-thread basis, allowing for more parallelism. 
We chose to implement it this way because the frame table and swap space resources are shared between all threads,
so it makes sense to lock it across all threads. Meanwhile, the SPT resources are not shared across threads and 
each thread has its own SPT, so it is more efficient to lock it within the thread. If there was a single SPT lock,
each thread would need to wait to edit its own SPT.

                           SURVEY QUESTIONS
                           ================

Answering these questions is optional, but it will help us improve the
course in future semesters.  Feel free to tell us anything you
want -- these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the semester.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future semesters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future semesters or the remaining projects?

>> Any other comments?
